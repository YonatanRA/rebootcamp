2021-03-14 13:02:31,545 [28778] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:02:42,034 [28926] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:03:43,177 [29020] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:04:27,347 [29020] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:04:27,347 [29020] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:04:27,347 [29020] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:04:27,349 [29020] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:04:27,349 [29020] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:04:27,350 [29020] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:04:27,853 [29020] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:04:27,854 [29020] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:04:27,854 [29020] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:04:27,855 [29020] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:04:27,855 [29020] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:04:36,060 [29020] WARNING  itables.downsample:25: [JupyterRequire] showing 5x20 of 5x33 as maxColumns=20. See https://mwouts.github.io/itables/#downsampling
2021-03-14 13:05:03,199 [29060] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:05:03,199 [29060] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:05:03,199 [29060] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:05:03,201 [29060] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:05:03,201 [29060] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:05:03,201 [29060] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:05:03,704 [29060] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:05:03,705 [29060] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:05:03,706 [29060] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:05:03,707 [29060] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:05:03,707 [29060] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:07:22,694 [29162] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:07:22,694 [29162] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:07:22,694 [29162] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:07:22,695 [29162] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:07:22,695 [29162] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:07:22,695 [29162] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:07:23,197 [29162] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:07:23,197 [29162] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:07:23,197 [29162] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:07:23,198 [29162] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:07:23,198 [29162] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:08:38,292 [29249] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:08:38,292 [29249] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:08:38,292 [29249] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:08:38,294 [29249] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:08:38,294 [29249] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:08:38,294 [29249] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:08:38,797 [29249] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:08:38,798 [29249] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:08:38,798 [29249] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:08:38,799 [29249] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:08:38,799 [29249] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:13:43,012 [29682] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:13:43,012 [29682] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:13:43,012 [29682] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:13:43,014 [29682] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:13:43,014 [29682] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:13:43,014 [29682] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:13:58,861 [29682] DEBUG    jupyter_nbutils.utils:120: [JupyterRequire] Jupyter nbextension version: 6.0.3
2021-03-14 13:13:58,864 [29682] DEBUG    jupyter_nbutils.utils:145: [JupyterRequire] Installing extension: jupyter_require
2021-03-14 13:13:59,174 [29682] INFO     jupyter_nbutils.utils:149: [JupyterRequire] Jupyter Require found itself running outside of Jupyter.
Traceback (most recent call last):
  File "/home/iudh/anaconda3/bin/jupyter-nbextension", line 11, in <module>
    sys.exit(main())
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 270, in launch_instance
    return super(JupyterApp, cls).launch_instance(argv=argv, **kwargs)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/config/application.py", line 664, in launch_instance
    app.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 983, in start
    super(NBExtensionApp, self).start()
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 259, in start
    self.subapp.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 711, in start
    self.install_extensions()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 682, in install_extensions
    full_dests = install(self.extra_args[0],
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 206, in install_nbextension_python
    m, nbexts = _get_nbextension_metadata(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 1117, in _get_nbextension_metadata
    m = import_item(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/utils/importstring.py", line 42, in import_item
    return __import__(parts[0])
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/__init__.py", line 34, in <module>
    from .notebook import link_css
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/notebook.py", line 30, in <module>
    from .core import execute_with_requirements
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 279, in <module>
    require = RequireJS()
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 90, in __new__
    raise EnvironmentError(msg)
OSError: Jupyter Require found itself running outside of Jupyter.

2021-03-14 13:13:59,174 [29682] DEBUG    jupyter_nbutils.utils:153: [JupyterRequire] Success.
2021-03-14 13:13:59,181 [29682] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:13:59,181 [29682] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:13:59,181 [29682] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:13:59,182 [29682] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:13:59,182 [29682] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:14:49,830 [29723] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:14:49,830 [29723] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:14:49,830 [29723] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:14:49,832 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:14:49,832 [29723] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:14:49,832 [29723] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:14:50,334 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:14:50,335 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:14:50,335 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:14:50,336 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:14:50,336 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:14:50,367 [29723] WARNING  itables.downsample:25: [JupyterRequire] showing 324x20 of 649x33 as maxColumns=20 and nbytes=171336>65536=maxBytes. See https://mwouts.github.io/itables/#downsampling
2021-03-14 13:14:50,617 [29723] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:14:50,617 [29723] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:14:50,617 [29723] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:14:50,618 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:14:50,619 [29723] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:14:50,619 [29723] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:14:51,124 [29723] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:14:51,124 [29723] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:14:51,125 [29723] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:14:51,126 [29723] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:14:51,127 [29723] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:14:51,127 [29723] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:15:03,343 [29765] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:15:03,343 [29765] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:15:03,343 [29765] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:15:03,344 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:15:03,344 [29765] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:15:03,344 [29765] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:15:07,969 [29765] DEBUG    jupyter_nbutils.utils:120: [JupyterRequire] Jupyter nbextension version: 6.0.3
2021-03-14 13:15:07,971 [29765] DEBUG    jupyter_nbutils.utils:145: [JupyterRequire] Installing extension: jupyter_require
2021-03-14 13:15:08,267 [29765] INFO     jupyter_nbutils.utils:149: [JupyterRequire] Jupyter Require found itself running outside of Jupyter.
Traceback (most recent call last):
  File "/home/iudh/anaconda3/bin/jupyter-nbextension", line 11, in <module>
    sys.exit(main())
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 270, in launch_instance
    return super(JupyterApp, cls).launch_instance(argv=argv, **kwargs)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/config/application.py", line 664, in launch_instance
    app.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 983, in start
    super(NBExtensionApp, self).start()
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 259, in start
    self.subapp.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 711, in start
    self.install_extensions()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 682, in install_extensions
    full_dests = install(self.extra_args[0],
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 206, in install_nbextension_python
    m, nbexts = _get_nbextension_metadata(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 1117, in _get_nbextension_metadata
    m = import_item(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/utils/importstring.py", line 42, in import_item
    return __import__(parts[0])
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/__init__.py", line 34, in <module>
    from .notebook import link_css
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/notebook.py", line 30, in <module>
    from .core import execute_with_requirements
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 279, in <module>
    require = RequireJS()
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 90, in __new__
    raise EnvironmentError(msg)
OSError: Jupyter Require found itself running outside of Jupyter.

2021-03-14 13:15:08,267 [29765] DEBUG    jupyter_nbutils.utils:153: [JupyterRequire] Success.
2021-03-14 13:15:08,275 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:15:08,275 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:15:08,276 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:15:08,276 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:15:08,276 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:15:33,265 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:15:33,266 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:15:33,266 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:15:33,267 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:15:33,267 [29765] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:16:15,959 [29810] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:16:15,959 [29810] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:16:15,959 [29810] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:16:15,960 [29810] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:16:15,960 [29810] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:16:15,960 [29810] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:16:17,290 [29810] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:16:17,290 [29810] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:16:17,291 [29810] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:16:17,291 [29810] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:16:17,291 [29810] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:16:51,502 [29835] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:16:51,502 [29835] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:16:51,502 [29835] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:16:51,504 [29835] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:16:51,504 [29835] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:16:51,504 [29835] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:17:01,005 [29835] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:17:01,006 [29835] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:17:01,007 [29835] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:17:01,008 [29835] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:24:52,213 [29835] WARNING  py.warnings:109: [JupyterRequire] /home/iudh/anaconda3/lib/python3.8/site-packages/ipyvolume/serialize.py:81: RuntimeWarning: invalid value encountered in true_divide
  gradient = gradient / np.sqrt(gradient[0]**2 + gradient[1]**2 + gradient[2]**2)

2021-03-14 13:26:29,608 [30377] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:26:29,608 [30377] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:26:29,608 [30377] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:26:29,610 [30377] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:26:29,610 [30377] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:26:29,610 [30377] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:26:31,363 [30393] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:26:31,363 [30393] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:26:31,363 [30393] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:26:31,364 [30393] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:26:31,364 [30393] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:26:31,365 [30393] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:26:34,030 [30393] WARNING  py.warnings:109: [JupyterRequire] /home/iudh/anaconda3/lib/python3.8/site-packages/ipyvolume/serialize.py:81: RuntimeWarning: invalid value encountered in true_divide
  gradient = gradient / np.sqrt(gradient[0]**2 + gradient[1]**2 + gradient[2]**2)

2021-03-14 13:27:39,069 [30555] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:27:39,069 [30555] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:27:39,069 [30555] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:27:39,070 [30555] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:27:39,070 [30555] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:27:39,071 [30555] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:27:50,191 [30555] WARNING  py.warnings:109: [JupyterRequire] /home/iudh/anaconda3/lib/python3.8/site-packages/ipyvolume/serialize.py:81: RuntimeWarning: invalid value encountered in true_divide
  gradient = gradient / np.sqrt(gradient[0]**2 + gradient[1]**2 + gradient[2]**2)

2021-03-14 13:29:18,802 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:29:36,991 [30654] DEBUG    jupyter_nbutils.utils:120: [JupyterRequire] Jupyter nbextension version: 6.0.3
2021-03-14 13:29:36,994 [30654] DEBUG    jupyter_nbutils.utils:145: [JupyterRequire] Installing extension: jupyter_require
2021-03-14 13:29:37,297 [30654] INFO     jupyter_nbutils.utils:149: [JupyterRequire] Jupyter Require found itself running outside of Jupyter.
Traceback (most recent call last):
  File "/home/iudh/anaconda3/bin/jupyter-nbextension", line 11, in <module>
    sys.exit(main())
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 270, in launch_instance
    return super(JupyterApp, cls).launch_instance(argv=argv, **kwargs)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/config/application.py", line 664, in launch_instance
    app.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 983, in start
    super(NBExtensionApp, self).start()
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 259, in start
    self.subapp.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 711, in start
    self.install_extensions()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 682, in install_extensions
    full_dests = install(self.extra_args[0],
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 206, in install_nbextension_python
    m, nbexts = _get_nbextension_metadata(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 1117, in _get_nbextension_metadata
    m = import_item(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/utils/importstring.py", line 42, in import_item
    return __import__(parts[0])
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/__init__.py", line 34, in <module>
    from .notebook import link_css
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/notebook.py", line 30, in <module>
    from .core import execute_with_requirements
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 279, in <module>
    require = RequireJS()
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 90, in __new__
    raise EnvironmentError(msg)
OSError: Jupyter Require found itself running outside of Jupyter.

2021-03-14 13:29:37,297 [30654] DEBUG    jupyter_nbutils.utils:153: [JupyterRequire] Success.
2021-03-14 13:29:37,301 [30654] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:29:37,301 [30654] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:29:37,301 [30654] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:29:37,304 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:29:37,304 [30654] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:29:37,305 [30654] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:29:37,808 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:29:37,809 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:29:37,809 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:29:37,810 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:29:37,810 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:29:41,852 [30654] WARNING  py.warnings:109: [JupyterRequire] /home/iudh/anaconda3/lib/python3.8/site-packages/ipyvolume/serialize.py:81: RuntimeWarning: invalid value encountered in true_divide
  gradient = gradient / np.sqrt(gradient[0]**2 + gradient[1]**2 + gradient[2]**2)

2021-03-14 13:36:42,392 [30654] DEBUG    jupyter_nbutils.utils:120: [JupyterRequire] Jupyter nbextension version: 6.0.3
2021-03-14 13:36:42,396 [30654] DEBUG    jupyter_nbutils.utils:145: [JupyterRequire] Installing extension: jupyter_require
2021-03-14 13:36:42,696 [30654] INFO     jupyter_nbutils.utils:149: [JupyterRequire] Jupyter Require found itself running outside of Jupyter.
Traceback (most recent call last):
  File "/home/iudh/anaconda3/bin/jupyter-nbextension", line 11, in <module>
    sys.exit(main())
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 270, in launch_instance
    return super(JupyterApp, cls).launch_instance(argv=argv, **kwargs)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/config/application.py", line 664, in launch_instance
    app.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 983, in start
    super(NBExtensionApp, self).start()
  File "/home/iudh/.local/lib/python3.8/site-packages/jupyter_core/application.py", line 259, in start
    self.subapp.start()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 711, in start
    self.install_extensions()
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 682, in install_extensions
    full_dests = install(self.extra_args[0],
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 206, in install_nbextension_python
    m, nbexts = _get_nbextension_metadata(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/notebook/nbextensions.py", line 1117, in _get_nbextension_metadata
    m = import_item(module)
  File "/home/iudh/.local/lib/python3.8/site-packages/traitlets/utils/importstring.py", line 42, in import_item
    return __import__(parts[0])
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/__init__.py", line 34, in <module>
    from .notebook import link_css
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/notebook.py", line 30, in <module>
    from .core import execute_with_requirements
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 279, in <module>
    require = RequireJS()
  File "/home/iudh/anaconda3/lib/python3.8/site-packages/jupyter_require/core.py", line 90, in __new__
    raise EnvironmentError(msg)
OSError: Jupyter Require found itself running outside of Jupyter.

2021-03-14 13:36:42,696 [30654] DEBUG    jupyter_nbutils.utils:153: [JupyterRequire] Success.
2021-03-14 13:36:42,699 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:36:42,699 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3': 'https://d3js.org/d3.v5.min'}, 'shim': {}}
2021-03-14 13:36:42,699 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'d3-array': 'https://d3js.org/d3-array.v2.min'}, 'shim': {}}
2021-03-14 13:36:42,700 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {'moment': 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.0/moment', 'chartjs': 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart'}, 'shim': {'chartjs': {'deps': ['moment']}}}
2021-03-14 13:36:42,700 [30654] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': OrderedDict([('datatables.net', 'https://cdn.datatables.net/1.10.18/js/jquery.dataTables'), ('datatables.net-buttons', 'https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min'), ('jszip', 'https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min'), ('buttons.colvis', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.colVis.min'), ('buttons.flash', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.flash.min'), ('buttons.html5', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min'), ('buttons.print', 'https://cdn.datatables.net/buttons/1.5.6/js/buttons.print.min'), ('pdfmake', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min'), ('vfsfonts', 'https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts'), ('datatables.responsive', 'https://cdn.datatables.net/responsive/2.2.2/js/dataTables.responsive.min'), ('datatables.scroller', 'https://cdn.datatables.net/scroller/2.0.0/js/dataTables.scroller.min'), ('datatables.select', 'https://cdn.datatables.net/select/1.3.0/js/dataTables.select.min')]), 'shim': OrderedDict([('datatables.net', {'exports': '$.fn.dataTable'}), ('datatables.net-buttons', {'deps': ['datatables.net']}), ('buttons.colvis', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.flash', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.html5', {'deps': ['jszip', 'datatables.net-buttons']}), ('buttons.print', {'deps': ['jszip', 'datatables.net-buttons']}), ('pdfmake', {'deps': ['datatables.net']}), ('vfsfonts', {'deps': ['datatables.net']})])}
2021-03-14 13:38:29,093 [30654] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data
2021-03-14 13:38:29,093 [30654] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data
2021-03-14 13:38:29,096 [30654] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/home/iudh/.config/matplotlib
2021-03-14 13:38:29,097 [30654] DEBUG    matplotlib:1464: [JupyterRequire] matplotlib version 3.3.0
2021-03-14 13:38:29,097 [30654] DEBUG    matplotlib:1465: [JupyterRequire] interactive is False
2021-03-14 13:38:29,097 [30654] DEBUG    matplotlib:1466: [JupyterRequire] platform is linux
2021-03-14 13:38:29,098 [30654] DEBUG    matplotlib:1467: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'posix', '_thread', '_weakref', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'mpl_toolkits', 'ruamel', 'zope', 'google', 'sphinxcontrib', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', '_posixsubprocess', 'select', 'collections.abc', 'math', 'selectors', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'pwd', 'grp', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'termios', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'ntpath', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas._typing', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.dtypes.missing', 'pandas.util._decorators', 'pandas.core.util', 'pandas._libs.hashing', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas._libs.ops', 'pandas.core.ops.roperator', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.core.strings', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas._libs.reshape', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.blocks', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.shared_docs', 'gzip', 'mmap', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.generic', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.groupby.base', 'pandas.core.window.common', 'pandas.core.util.numba_', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.series', 'pandas.core.aggregation', 'pandas.core.internals.construction', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas._libs.groupby', 'pandas._libs.reduction', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.api', 'pandas.util._tester', 'pandas._libs.testing', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'pandas.io.formats.html', 'qgrid._version', 'ipywidgets._version', 'ipywidgets.widgets.widget', 'ipywidgets.widgets.util', 'ipywidgets.widgets.trait_types', 'ipywidgets.widgets.widget_layout', 'ipywidgets.widgets.widget_style', 'ipywidgets.widgets.domwidget', 'ipywidgets.widgets.valuewidget', 'ipywidgets.widgets.widget_core', 'ipywidgets.widgets.widget_description', 'ipywidgets.widgets.widget_bool', 'ipywidgets.widgets.widget_button', 'ipywidgets.widgets.docutils', 'ipywidgets.widgets.widget_box', 'ipywidgets.widgets.widget_int', 'ipywidgets.widgets.widget_float', 'ipywidgets.widgets.widget_color', 'ipywidgets.widgets.widget_date', 'ipywidgets.widgets.widget_output', 'ipywidgets.widgets.widget_selection', 'ipywidgets.widgets.widget_selectioncontainer', 'ipywidgets.widgets.widget_string', 'ipywidgets.widgets.widget_controller', 'ipywidgets.widgets.interaction', 'ipywidgets.widgets.widget_link', 'ipywidgets.widgets.widget_media', 'ipywidgets.widgets.widget_templates', 'ipywidgets.widgets.widget_upload', 'ipywidgets.widgets', 'ipywidgets', 'qgrid.grid', 'qgrid', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'itables.options', 'itables.downsample', 'itables.javascript', 'itables.version', 'itables', 'urllib3.packages.ssl_match_hostname', 'urllib3.packages', 'urllib3.packages.six', 'urllib3.packages.six.moves', 'urllib3.packages.six.moves.http_client', 'urllib3.exceptions', 'urllib3.util.wait', 'urllib3.contrib', 'urllib3.contrib._appengine_environ', 'urllib3.util.connection', '_cffi_backend', '_brotli.lib', '_brotli', 'brotli._brotli', 'brotli.brotli', 'brotli', 'urllib3.util.request', 'urllib3.util.response', 'urllib3.util.url', 'urllib3.util.ssl_', 'urllib3.util.timeout', 'urllib3.util.retry', 'urllib3.util', 'urllib3._collections', 'urllib3.connection', 'urllib3.fields', 'urllib3.filepost', 'urllib3.packages.six.moves.urllib', 'urllib3.packages.six.moves.urllib.parse', 'urllib3.request', 'urllib3.response', 'urllib3.util.queue', 'urllib3.connectionpool', 'urllib3.poolmanager', 'urllib3', 'chardet.compat', 'chardet.enums', 'chardet.charsetprober', 'chardet.charsetgroupprober', 'chardet.codingstatemachine', 'chardet.escsm', 'chardet.escprober', 'chardet.latin1prober', 'chardet.mbcssm', 'chardet.utf8prober', 'chardet.mbcharsetprober', 'chardet.euctwfreq', 'chardet.euckrfreq', 'chardet.gb2312freq', 'chardet.big5freq', 'chardet.jisfreq', 'chardet.chardistribution', 'chardet.jpcntx', 'chardet.sjisprober', 'chardet.eucjpprober', 'chardet.gb2312prober', 'chardet.euckrprober', 'chardet.cp949prober', 'chardet.big5prober', 'chardet.euctwprober', 'chardet.mbcsgroupprober', 'chardet.sbcharsetprober', 'chardet.langcyrillicmodel', 'chardet.langgreekmodel', 'chardet.langbulgarianmodel', 'chardet.langthaimodel', 'chardet.langhebrewmodel', 'chardet.hebrewprober', 'chardet.langturkishmodel', 'chardet.sbcsgroupprober', 'chardet.universaldetector', 'chardet.version', 'chardet', 'requests.exceptions', 'requests.__version__', 'importlib.resources', 'certifi.core', 'certifi', 'requests.certs', 'http.cookiejar', 'http.cookies', 'requests.compat', 'requests._internal_utils', 'requests.cookies', 'requests.structures', 'requests.utils', 'requests.packages.urllib3.packages.ssl_match_hostname', 'requests.packages.urllib3.packages', 'requests.packages.urllib3.packages.six', 'requests.packages.urllib3.packages.six.moves', 'requests.packages.urllib3.packages.six.moves.http_client', 'requests.packages.urllib3.exceptions', 'requests.packages.urllib3.util.wait', 'requests.packages.urllib3.contrib', 'requests.packages.urllib3.contrib._appengine_environ', 'requests.packages.urllib3.util.connection', 'requests.packages.urllib3.util.request', 'requests.packages.urllib3.util.response', 'requests.packages.urllib3.util.url', 'requests.packages.urllib3.util.ssl_', 'requests.packages.urllib3.util.timeout', 'requests.packages.urllib3.util.retry', 'requests.packages.urllib3.util', 'requests.packages.urllib3._collections', 'requests.packages.urllib3.connection', 'requests.packages.urllib3.fields', 'requests.packages.urllib3.filepost', 'requests.packages.urllib3.packages.six.moves.urllib', 'requests.packages.urllib3.packages.six.moves.urllib.parse', 'requests.packages.urllib3.request', 'requests.packages.urllib3.response', 'requests.packages.urllib3.util.queue', 'requests.packages.urllib3.connectionpool', 'requests.packages.urllib3.poolmanager', 'requests.packages.urllib3', 'idna.package_data', 'idna.idnadata', 'idna.intranges', 'idna.core', 'idna', 'requests.packages.idna.package_data', 'requests.packages.idna.idnadata', 'requests.packages.idna.intranges', 'requests.packages.idna.core', 'requests.packages.idna', 'requests.packages.chardet.compat', 'requests.packages.chardet.enums', 'requests.packages.chardet.charsetprober', 'requests.packages.chardet.charsetgroupprober', 'requests.packages.chardet.codingstatemachine', 'requests.packages.chardet.escsm', 'requests.packages.chardet.escprober', 'requests.packages.chardet.latin1prober', 'requests.packages.chardet.mbcssm', 'requests.packages.chardet.utf8prober', 'requests.packages.chardet.mbcharsetprober', 'requests.packages.chardet.euctwfreq', 'requests.packages.chardet.euckrfreq', 'requests.packages.chardet.gb2312freq', 'requests.packages.chardet.big5freq', 'requests.packages.chardet.jisfreq', 'requests.packages.chardet.chardistribution', 'requests.packages.chardet.jpcntx', 'requests.packages.chardet.sjisprober', 'requests.packages.chardet.eucjpprober', 'requests.packages.chardet.gb2312prober', 'requests.packages.chardet.euckrprober', 'requests.packages.chardet.cp949prober', 'requests.packages.chardet.big5prober', 'requests.packages.chardet.euctwprober', 'requests.packages.chardet.mbcsgroupprober', 'requests.packages.chardet.sbcharsetprober', 'requests.packages.chardet.langcyrillicmodel', 'requests.packages.chardet.langgreekmodel', 'requests.packages.chardet.langbulgarianmodel', 'requests.packages.chardet.langthaimodel', 'requests.packages.chardet.langhebrewmodel', 'requests.packages.chardet.hebrewprober', 'requests.packages.chardet.langturkishmodel', 'requests.packages.chardet.sbcsgroupprober', 'requests.packages.chardet.universaldetector', 'requests.packages.chardet.version', 'requests.packages.chardet', 'requests.packages', 'stringprep', 'encodings.idna', 'requests.hooks', 'requests.auth', 'requests.status_codes', 'requests.models', 'socks', 'urllib3.contrib.socks', 'requests.adapters', 'requests.sessions', 'requests.api', 'requests', 'cachetools.cache', 'cachetools.keys', 'cachetools.decorators', 'cachetools.fifo', 'cachetools.lfu', 'cachetools.lru', 'cachetools.mru', 'cachetools.rr', 'cachetools.ttl', 'cachetools', 'world_bank_data.options', 'world_bank_data.request', 'world_bank_data.search', 'world_bank_data.country', 'world_bank_data.others', 'world_bank_data.indicator', 'world_bank_data', 'netrc', 'socketserver', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_datatables.config', 'jupyter_datatables.__about__', 'jupyter_datatables', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'ipyvolume._version', 'ipyvolume.utils', 'ipyvolume.styles', 'traittypes.traittypes', 'traittypes._version', 'traittypes', 'PIL._version', 'PIL', 'xml.etree', 'xml.etree.ElementPath', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', '_elementtree', 'xml.etree.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'ipyvolume.traittypes', 'ipywebrtc._version', 'ipywebrtc.webrtc', 'ipywebrtc', 'ipyvolume.serialize', 'ipyvolume.transferfunction', 'pythreejs.enums', 'pythreejs._package', 'pythreejs._version', 'pythreejs.core', 'pythreejs._base', 'pythreejs._base.Three', 'pythreejs._base.uniforms', 'ipydatawidgets._frontend', 'ipydatawidgets.widgets', 'ipydatawidgets.ndarray.serializers', 'ipydatawidgets.ndarray.traits', 'ipydatawidgets.ndarray.widgets', 'ipydatawidgets.ndarray.union', 'ipydatawidgets.ndarray.media', 'ipydatawidgets.ndarray', 'ipydatawidgets._version', 'ipydatawidgets.nbextension', 'ipydatawidgets', 'pythreejs.traits', 'pythreejs.core.BufferAttribute_autogen', 'pythreejs.core.BufferAttribute', 'pythreejs.core.BaseGeometry_autogen', 'pythreejs.core.Geometry_autogen', 'pythreejs.core.Geometry', 'pythreejs.core.BaseBufferGeometry_autogen', 'pythreejs.core.InterleavedBuffer_autogen', 'pythreejs.core.InterleavedBufferAttribute_autogen', 'pythreejs.core.BufferGeometry_autogen', 'pythreejs.core.BufferGeometry', 'pythreejs.geometries', 'pythreejs.geometries.BoxGeometry_autogen', 'pythreejs.geometries.SphereGeometry_autogen', 'pythreejs.lights', 'pythreejs.core.Object3D_autogen', 'pythreejs.core.Object3D', 'pythreejs.lights.Light_autogen', 'pythreejs.lights.AmbientLight_autogen', 'pythreejs.cameras', 'pythreejs.cameras.Camera_autogen', 'pythreejs.lights.LightShadow_autogen', 'pythreejs.lights.DirectionalLight_autogen', 'pythreejs.materials', 'pythreejs.math', 'pythreejs.math.Plane_autogen', 'pythreejs.materials.Material_autogen', 'pythreejs.materials.Material', 'pythreejs.textures', 'pythreejs.textures.Texture_autogen', 'pythreejs.textures.CubeTexture_autogen', 'pythreejs.materials.MeshLambertMaterial_autogen', 'pythreejs.materials.SpriteMaterial_autogen', 'pythreejs.objects', 'pythreejs.objects.Group_autogen', 'pythreejs.objects.Line_autogen', 'pythreejs.objects.Mesh_autogen', 'pythreejs.objects.Sprite_autogen', 'pythreejs.textures.DataTexture_autogen', 'pythreejs.textures.DataTexture', 'pythreejs.textures.TextTexture_autogen', 'pythreejs.pythreejs', 'pythreejs._example_helper', 'pythreejs.animation', 'pythreejs.animation.AnimationMixer_autogen', 'pythreejs.animation.KeyframeTrack_autogen', 'pythreejs.animation.AnimationClip_autogen', 'pythreejs.animation.AnimationAction_autogen', 'pythreejs.animation.AnimationAction', 'pythreejs.animation.AnimationObjectGroup_autogen', 'pythreejs.animation.AnimationUtils_autogen', 'pythreejs.animation.PropertyBinding_autogen', 'pythreejs.animation.PropertyMixer_autogen', 'pythreejs.audio', 'pythreejs.audio.AudioListener_autogen', 'pythreejs.audio.AudioAnalyser_autogen', 'pythreejs.audio.Audio_autogen', 'pythreejs.audio.PositionalAudio_autogen', 'pythreejs.cameras.PerspectiveCamera_autogen', 'pythreejs.cameras.ArrayCamera_autogen', 'pythreejs.cameras.CombinedCamera_autogen', 'pythreejs.cameras.CubeCamera_autogen', 'pythreejs.cameras.OrthographicCamera_autogen', 'pythreejs.cameras.StereoCamera_autogen', 'pythreejs.controls', 'pythreejs.controls.Controls_autogen', 'pythreejs.controls.FlyControls_autogen', 'pythreejs.controls.OrbitControls_autogen', 'pythreejs.controls.OrbitControls', 'pythreejs.controls.Picker_autogen', 'pythreejs.controls.TrackballControls_autogen', 'pythreejs.core.Clock_autogen', 'pythreejs.core.DirectGeometry_autogen', 'pythreejs.core.EventDispatcher_autogen', 'pythreejs.core.InstancedBufferAttribute_autogen', 'pythreejs.core.InstancedBufferGeometry_autogen', 'pythreejs.core.InstancedInterleavedBuffer_autogen', 'pythreejs.core.Layers_autogen', 'pythreejs.math.Ray_autogen', 'pythreejs.core.Raycaster_autogen', 'pythreejs.renderers', 'pythreejs.renderers.webgl', 'pythreejs.renderers.webgl.WebGLShadowMap_autogen', 'pythreejs._base.renderable', 'pythreejs.scenes', 'pythreejs.scenes.Fog_autogen', 'pythreejs.scenes.FogExp2_autogen', 'pythreejs.scenes.Scene_autogen', 'pythreejs.core.Renderer', 'pythreejs.helpers', 'pythreejs.objects.Blackbox_autogen', 'pythreejs.objects.Blackbox', 'pythreejs.helpers.ArrowHelper_autogen', 'pythreejs.helpers.AxesHelper_autogen', 'pythreejs.math.Box3_autogen', 'pythreejs.helpers.Box3Helper_autogen', 'pythreejs.helpers.BoxHelper_autogen', 'pythreejs.helpers.CameraHelper_autogen', 'pythreejs.helpers.DirectionalLightHelper_autogen', 'pythreejs.helpers.FaceNormalsHelper_autogen', 'pythreejs.helpers.GridHelper_autogen', 'pythreejs.lights.HemisphereLight_autogen', 'pythreejs.helpers.HemisphereLightHelper_autogen', 'pythreejs.helpers.PlaneHelper_autogen', 'pythreejs.lights.PointLight_autogen', 'pythreejs.helpers.PointLightHelper_autogen', 'pythreejs.helpers.PolarGridHelper_autogen', 'pythreejs.lights.RectAreaLight_autogen', 'pythreejs.helpers.RectAreaLightHelper_autogen', 'pythreejs.helpers.SkeletonHelper_autogen', 'pythreejs.lights.SpotLight_autogen', 'pythreejs.helpers.SpotLightHelper_autogen', 'pythreejs.helpers.VertexNormalsHelper_autogen', 'pythreejs.geometries.BoxBufferGeometry_autogen', 'pythreejs.geometries.BoxLineGeometry_autogen', 'pythreejs.geometries.CircleBufferGeometry_autogen', 'pythreejs.geometries.CircleGeometry_autogen', 'pythreejs.geometries.ConeGeometry_autogen', 'pythreejs.geometries.CylinderBufferGeometry_autogen', 'pythreejs.geometries.CylinderGeometry_autogen', 'pythreejs.geometries.DodecahedronGeometry_autogen', 'pythreejs.geometries.EdgesGeometry_autogen', 'pythreejs.geometries.ExtrudeGeometry_autogen', 'pythreejs.geometries.IcosahedronGeometry_autogen', 'pythreejs.geometries.LatheBufferGeometry_autogen', 'pythreejs.geometries.LatheGeometry_autogen', 'pythreejs.geometries.LineSegmentsGeometry_autogen', 'pythreejs.geometries.LineGeometry_autogen', 'pythreejs.geometries.OctahedronGeometry_autogen', 'pythreejs.geometries.ParametricGeometry_autogen', 'pythreejs.geometries.PlaneBufferGeometry_autogen', 'pythreejs.geometries.PlaneGeometry_autogen', 'pythreejs.geometries.PolyhedronGeometry_autogen', 'pythreejs.geometries.RingBufferGeometry_autogen', 'pythreejs.geometries.RingGeometry_autogen', 'pythreejs.extras', 'pythreejs.extras.core', 'pythreejs.extras.core.Shape_autogen', 'pythreejs.geometries.ShapeGeometry_autogen', 'pythreejs.geometries.SphereBufferGeometry_autogen', 'pythreejs.geometries.TetrahedronGeometry_autogen', 'pythreejs.geometries.TextGeometry_autogen', 'pythreejs.geometries.TorusBufferGeometry_autogen', 'pythreejs.geometries.TorusGeometry_autogen', 'pythreejs.geometries.TorusKnotBufferGeometry_autogen', 'pythreejs.geometries.TorusKnotGeometry_autogen', 'pythreejs.extras.core.Curve_autogen', 'pythreejs.geometries.TubeGeometry_autogen', 'pythreejs.geometries.WireframeGeometry_autogen', 'pythreejs.lights.DirectionalLightShadow_autogen', 'pythreejs.lights.SpotLightShadow_autogen', 'pythreejs.loaders', 'pythreejs.loaders.AnimationLoader_autogen', 'pythreejs.loaders.AudioLoader_autogen', 'pythreejs.loaders.BufferGeometryLoader_autogen', 'pythreejs.loaders.Cache_autogen', 'pythreejs.loaders.CompressedTextureLoader_autogen', 'pythreejs.loaders.CubeTextureLoader_autogen', 'pythreejs.loaders.DataTextureLoader_autogen', 'pythreejs.loaders.FileLoader_autogen', 'pythreejs.loaders.FontLoader_autogen', 'pythreejs.loaders.ImageBitmapLoader_autogen', 'pythreejs.loaders.JSONLoader_autogen', 'pythreejs.loaders.ImageLoader_autogen', 'pythreejs.loaders.Loader_autogen', 'pythreejs.loaders.LoadingManager_autogen', 'pythreejs.loaders.MaterialLoader_autogen', 'pythreejs.loaders.ObjectLoader_autogen', 'pythreejs.loaders.TextureLoader_autogen', 'pythreejs.materials.LineBasicMaterial_autogen', 'pythreejs.materials.LineDashedMaterial_autogen', 'pythreejs.materials.LineMaterial_autogen', 'pythreejs.materials.MeshBasicMaterial_autogen', 'pythreejs.materials.MeshDepthMaterial_autogen', 'pythreejs.materials.MeshMatcapMaterial_autogen', 'pythreejs.materials.MeshNormalMaterial_autogen', 'pythreejs.materials.MeshPhongMaterial_autogen', 'pythreejs.materials.MeshStandardMaterial_autogen', 'pythreejs.materials.MeshPhysicalMaterial_autogen', 'pythreejs.materials.MeshToonMaterial_autogen', 'pythreejs.materials.PointsMaterial_autogen', 'pythreejs.materials.ShaderMaterial_autogen', 'pythreejs.materials.RawShaderMaterial_autogen', 'pythreejs.materials.ShadowMaterial_autogen', 'pythreejs.math.Box2_autogen', 'pythreejs.math.Cylindrical_autogen', 'pythreejs.math.Frustum_autogen', 'pythreejs.math.Interpolant_autogen', 'pythreejs.math.Line3_autogen', 'pythreejs.math.Math_autogen', 'pythreejs.math.Quaternion_autogen', 'pythreejs.math.Sphere_autogen', 'pythreejs.math.Spherical_autogen', 'pythreejs.math.Triangle_autogen', 'pythreejs.objects.Bone_autogen', 'pythreejs.objects.CloneArray_autogen', 'pythreejs.objects.LineLoop_autogen', 'pythreejs.objects.Line2_autogen', 'pythreejs.objects.LineSegments2_autogen', 'pythreejs.objects.LineSegments_autogen', 'pythreejs.objects.LOD_autogen', 'pythreejs.objects.Points_autogen', 'pythreejs.objects.Skeleton_autogen', 'pythreejs.objects.SkinnedMesh_autogen', 'pythreejs.renderers.WebGLRenderer', 'pythreejs.renderers.WebGLRenderTargetCube_autogen', 'pythreejs.renderers.WebGLRenderTarget_autogen', 'pythreejs.textures.CompressedTexture_autogen', 'pythreejs.textures.DataTexture3D_autogen', 'pythreejs.textures.DataTexture3D', 'pythreejs.textures.DepthTexture_autogen', 'pythreejs.textures.ImageTexture_autogen', 'pythreejs.textures.VideoTexture_autogen', 'pythreejs.animation.tracks', 'pythreejs.animation.tracks.ColorKeyframeTrack_autogen', 'pythreejs.animation.tracks.BooleanKeyframeTrack_autogen', 'pythreejs.animation.tracks.NumberKeyframeTrack_autogen', 'pythreejs.animation.tracks.QuaternionKeyframeTrack_autogen', 'pythreejs.animation.tracks.StringKeyframeTrack_autogen', 'pythreejs.animation.tracks.VectorKeyframeTrack_autogen', 'pythreejs.extras.core.CurvePath_autogen', 'pythreejs.extras.core.Font_autogen', 'pythreejs.extras.core.Path_autogen', 'pythreejs.extras.core.ShapePath_autogen', 'pythreejs.extras.curves', 'pythreejs.extras.curves.ArcCurve_autogen', 'pythreejs.extras.curves.CatmullRomCurve3_autogen', 'pythreejs.extras.curves.CubicBezierCurve3_autogen', 'pythreejs.extras.curves.CubicBezierCurve_autogen', 'pythreejs.extras.curves.EllipseCurve_autogen', 'pythreejs.extras.curves.LineCurve3_autogen', 'pythreejs.extras.curves.LineCurve_autogen', 'pythreejs.extras.curves.QuadraticBezierCurve3_autogen', 'pythreejs.extras.curves.QuadraticBezierCurve_autogen', 'pythreejs.extras.curves.SplineCurve_autogen', 'pythreejs.extras.objects', 'pythreejs.extras.objects.ImmediateRenderObject_autogen', 'pythreejs.math.interpolants', 'pythreejs.math.interpolants.CubicInterpolant_autogen', 'pythreejs.math.interpolants.DiscreteInterpolant_autogen', 'pythreejs.math.interpolants.LinearInterpolant_autogen', 'pythreejs.math.interpolants.QuaternionLinearInterpolant_autogen', 'pythreejs.renderers.shaders', 'pythreejs.renderers.shaders.ShaderChunk_autogen', 'pythreejs.renderers.shaders.ShaderLib_autogen', 'pythreejs.renderers.shaders.UniformsLib_autogen', 'pythreejs.renderers.webgl.WebGLBufferRenderer_autogen', 'pythreejs.renderers.webgl.WebGLCapabilities_autogen', 'pythreejs.renderers.webgl.WebGLExtensions_autogen', 'pythreejs.renderers.webgl.WebGLGeometries_autogen', 'pythreejs.renderers.webgl.WebGLIndexedBufferRenderer_autogen', 'pythreejs.renderers.webgl.WebGLLights_autogen', 'pythreejs.renderers.webgl.WebGLObjects_autogen', 'pythreejs.renderers.webgl.WebGLPrograms_autogen', 'pythreejs.renderers.webgl.WebGLProgram_autogen', 'pythreejs.renderers.webgl.WebGLProperties_autogen', 'pythreejs.renderers.webgl.WebGLShader_autogen', 'pythreejs.renderers.webgl.WebGLState_autogen', 'pythreejs', 'ipyvolume.widgets', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy._distributor_init', 'scipy.__config__', 'scipy.version', 'scipy._lib.six', 'scipy._lib._version', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'numpy.dual', 'scipy.fft', 'scipy', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_cython_0_29_14', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.linalg.linalg_version', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy._lib._numpy_compat', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'scipy.linalg._sketches', 'scipy.linalg', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special.lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'ipyvolume.examples', 'ipyvolume.datasets', 'ipywidgets.embed', 'ipyvolume.embed', 'ipyvolume.pylab', 'ipyvolume', 'bqplot.traits', 'bqplot._version', 'bqplot.scales', 'bqplot.colorschemes', 'bqplot.marks', 'bqplot.interacts', 'bqplot.axes', 'bqplot.figure', 'bqplot.toolbar', 'bqplot.default_tooltip', 'bqplot', 'bqplot.pyplot', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-03-14 13:38:29,123 [30654] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/home/iudh/.cache/matplotlib
2021-03-14 13:38:29,124 [30654] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /home/iudh/.cache/matplotlib/fontlist-v330.json
2021-03-14 13:38:29,218 [30654] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:38:29,219 [30654] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:38:29,220 [30654] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:38:58,945 [31068] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:38:58,945 [31068] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:38:58,945 [31068] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:38:58,946 [31068] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:38:58,946 [31068] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:38:58,946 [31068] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:39:27,893 [31068] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data
2021-03-14 13:39:27,893 [31068] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data
2021-03-14 13:39:27,895 [31068] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/home/iudh/.config/matplotlib
2021-03-14 13:39:27,896 [31068] DEBUG    matplotlib:1464: [JupyterRequire] matplotlib version 3.3.0
2021-03-14 13:39:27,896 [31068] DEBUG    matplotlib:1465: [JupyterRequire] interactive is False
2021-03-14 13:39:27,896 [31068] DEBUG    matplotlib:1466: [JupyterRequire] platform is linux
2021-03-14 13:39:27,897 [31068] DEBUG    matplotlib:1467: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'posix', '_thread', '_weakref', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'mpl_toolkits', 'ruamel', 'zope', 'google', 'sphinxcontrib', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', '_posixsubprocess', 'select', 'collections.abc', 'math', 'selectors', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'pwd', 'grp', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'termios', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'ntpath', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'matplotlib', 'gzip', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-03-14 13:39:27,920 [31068] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/home/iudh/.cache/matplotlib
2021-03-14 13:39:27,923 [31068] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /home/iudh/.cache/matplotlib/fontlist-v330.json
2021-03-14 13:39:27,997 [31068] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:39:28,000 [31068] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:39:28,002 [31068] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:39:36,483 [31094] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:39:36,483 [31094] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:39:36,484 [31094] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:39:36,485 [31094] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:39:36,485 [31094] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:39:36,485 [31094] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:39:37,003 [31094] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-03-14 13:39:37,003 [31094] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-03-14 13:39:37,004 [31094] INFO     root:247: [JupyterRequire] Initializing comms.
2021-03-14 13:39:37,010 [31094] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-03-14 13:39:37,011 [31094] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-03-14 13:39:37,012 [31094] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-03-14 13:47:18,081 [31094] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: /home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data
2021-03-14 13:47:18,081 [31094] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: /home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data
2021-03-14 13:47:18,083 [31094] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=/home/iudh/.config/matplotlib
2021-03-14 13:47:18,085 [31094] DEBUG    matplotlib:1464: [JupyterRequire] matplotlib version 3.3.0
2021-03-14 13:47:18,085 [31094] DEBUG    matplotlib:1465: [JupyterRequire] interactive is False
2021-03-14 13:47:18,085 [31094] DEBUG    matplotlib:1466: [JupyterRequire] platform is linux
2021-03-14 13:47:18,085 [31094] DEBUG    matplotlib:1467: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'posix', '_thread', '_weakref', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'mpl_toolkits', 'ruamel', 'zope', 'google', 'sphinxcontrib', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', '_posixsubprocess', 'select', 'collections.abc', 'math', 'selectors', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'pwd', 'grp', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', '_struct', 'struct', 'six', 'traitlets.utils', 'traitlets.utils.getargspec', 'ipython_genutils._version', 'ipython_genutils', 'locale', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.traitlets', 'traitlets._version', 'traitlets', 'decorator', 'gettext', 'argparse', '_ast', 'ast', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'ipython_genutils.importstring', 'traitlets.config.application', 'traitlets.config', 'pprint', 'sysconfig', 'urllib', 'urllib.parse', '_sysconfigdata__linux_x86_64-linux-gnu', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'termios', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'ntpath', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'colorama.ansi', '_ctypes', 'ctypes._endian', 'ctypes', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_17', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'socketserver', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'matplotlib', 'gzip', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_21', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-03-14 13:47:18,107 [31094] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=/home/iudh/.cache/matplotlib
2021-03-14 13:47:18,108 [31094] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from /home/iudh/.cache/matplotlib/fontlist-v330.json
2021-03-14 13:47:18,173 [31094] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:47:18,176 [31094] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:47:18,177 [31094] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-03-14 13:47:18,750 [31094] DEBUG    tensorflow:35: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,407 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,408 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,409 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,410 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,411 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,412 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,413 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,414 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,415 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,416 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,417 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,418 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,419 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,420 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,421 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,422 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,423 [31094] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,443 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,444 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,445 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 10.535
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,446 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,447 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,448 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 11.24
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,449 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,450 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,451 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,452 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 10.24
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 11.535
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,453 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,454 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 11.24
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 10.335
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 10.1925
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,455 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 11.335
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-03-14 13:47:25,456 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 11.145
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 10.335
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 11.145
2021-03-14 13:47:25,457 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 10.145
2021-03-14 13:47:25,458 [31094] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2021-03-14 13:49:17,110 [31094] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend nbAgg version unknown.
2021-03-14 13:56:36,288 [31094] DEBUG    matplotlib.pyplot:272: [JupyterRequire] Loaded backend nbAgg version unknown.
2021-03-14 13:56:37,065 [31094] DEBUG    asyncio:59: [JupyterRequire] Using selector: EpollSelector
2021-03-14 13:56:37,066 [31094] DEBUG    asyncio:59: [JupyterRequire] Using selector: EpollSelector
2021-03-14 13:56:37,556 [31094] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 0.43499999999999994
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 0.15000000000000002
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,557 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 10.35
2021-03-14 13:56:37,558 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 11.535
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Roman.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 1.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,559 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 0.15000000000000002
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal 700 condensed>) = 11.535
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal 600 normal>) = 11.24
2021-03-14 13:56:37,560 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 11.24
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Bold.otf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 10.245
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,561 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Bold.otf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 10.25
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 0.635
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 11.145
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,562 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal 600 normal>) = 10.34
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 1.24
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,563 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Roman.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 1.25
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal 600 normal>) = 11.24
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,564 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 10.145
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,565 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal 300 normal>) = 11.145
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 10.25
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal 600 normal>) = 11.24
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,566 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal 700 condensed>) = 10.634999999999998
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,567 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 11.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 11.145
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 11.25
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 10.145
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal 600 normal>) = 10.24
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 10.535
2021-03-14 13:56:37,568 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 100 normal>) = 11.335
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 11.25
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal 300 normal>) = 11.145
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 250 normal>) = 11.1925
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,569 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 11.25
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal 700 normal>) = 10.335
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 1.335
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 0.35000000000000003
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal 300 normal>) = 10.145
2021-03-14 13:56:37,570 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 10.05
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 10.15
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 11.25
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 0.43499999999999994
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 10.34
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 10.434999999999999
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 11.05
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 11.535
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal 700 normal>) = 11.335
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 11.145
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 1.535
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal 500 normal>) = 10.145
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal 300 normal>) = 11.145
2021-03-14 13:56:37,571 [31094] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/iudh/.local/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
